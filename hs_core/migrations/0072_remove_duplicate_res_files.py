# Generated by Django 3.2.19 on 2023-07-27 18:50

from django.contrib.contenttypes.models import ContentType
from django.db import migrations
from django.db.models import Count


def migrate_resourcefiles(apps, schema_editor):
    # first we remove files with content_type other than the content type for CompositeResource
    CompositeResource = apps.get_model('hs_composite_resource', 'CompositeResource')
    ResourceFile = apps.get_model('hs_core', 'ResourceFile')
    desired_content_type = ContentType.objects.get_for_model(CompositeResource)
    non_conforming_files = ResourceFile.objects.exclude(content_type=desired_content_type).only('id')
    print(f"Non-conforming files to be removed:\n{non_conforming_files}")
    non_conforming_files.delete()

    dup_resource_files = ResourceFile.objects.values('resource_file', 'object_id') \
        .annotate(count=Count('id')) \
        .order_by() \
        .filter(count__gt=1)
    if dup_resource_files:
        total_resfile_containing_dups = dup_resource_files.count()
        current_resfile = 1
        print(f"Discovered the following duplicate file objects:\n {dup_resource_files}")
        for resourcefile in dup_resource_files:
            filename = resourcefile["resource_file"]
            num_duplicate_paths = resourcefile['count']
            print(f"{current_resfile}/{total_resfile_containing_dups} \
                         Repairing file {filename} by removing {num_duplicate_paths - 1} paths.")
            resourcefiles_to_remove = ResourceFile.objects \
                .filter(resource_file=filename, object_id=resourcefile['object_id'])
            ResourceFile.objects.filter(pk__in=resourcefiles_to_remove.values_list('pk')[1:]).delete()
            current_resfile += 1


class Migration(migrations.Migration):

    dependencies = [
        ('hs_core', '0071_alter_date_type'),
    ]

    operations = [
        migrations.RunPython(migrate_resourcefiles),
    ]
